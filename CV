import requests
import json
from requests.packages.urllib3.exceptions import InsecureRequestWarning
import time
import base64
import getpass


url = "http://ec2amaz-nib1gef/webconsole/api/Login"

username = input("cvadmin")
Password = getpass.getpass (prompt='Cv@dmin12')


message_bytes = Password.encode('ascii')
base64_bytes = base64.b64encode(message_bytes)
base64_message = base64_bytes.decode('ascii')

payload="{\n  \"password\": \""+base64_message+"\",\n  \"username\": \""+username+"\"\n}"
headers = {
  'Accept': 'application/json',
  'Content-Type': 'application/json',
  'Authorization': 'Basic YOUR_BASE64_ENCODED_STRING'}

response = requests.request("POST", url, headers=headers, data=payload, verify=False)

check =response.status_code

response = json.loads(response.text)

token = str(response["token"])

clientname = input("Enter clientname to perform backup::")
backup_type = input("Press 1 for Full or 2 for Incremental::")




url = "http://ec2amaz-nib1gef/webconsole/api/CreateTask"

payload="{\r\n  \"taskInfo\": {\r\n    \"associations\": [\r\n      {\r\n        \"applicationId\": 33,\r\n        \"clientName\": \""+clientname+"\",\r\n        \"commCellId\": 0,\r\n        \"subclientName\": \"default\",\r\n        \"_type_\": 7,\r\n        \"appName\": \"File System\"\r\n      }\r\n    ],\r\n    \"task\": {\r\n      \"sequenceNumber\": 10,\r\n      \"initiatedFrom\": 2,\r\n      \"taskType\": 1,\r\n      \"policyType\": 0,\r\n      \"taskId\": 0,\r\n      \"taskFlags\": {\r\n        \"disabled\": false\r\n      }\r\n    },\r\n    \"subTasks\": [\r\n      {\r\n        \"subTask\": {\r\n          \"subTaskType\": 2,\r\n          \"operationType\": 2\r\n        },\r\n        \"options\": {\r\n          \"backupOpts\": {\r\n            \"truncateLogsOnSource\": false,\r\n            \"sybaseSkipFullafterLogBkp\": false,\r\n            \"backupLevel\": "+str(backup_type)+",\r\n            \"runIncrementalBackup\": true,\r\n            \"isSpHasInLineCopy\": false,\r\n            \"runSILOBackup\": false,\r\n            \"doNotTruncateLog\": false,\r\n            \"dataOpt\": {\r\n              \"skipCatalogPhaseForSnapBackup\": false,\r\n              \"followMountPoints\": true,\r\n              \"enableIndexCheckPointing\": false,\r\n              \"enforceTransactionLogUsage\": false,\r\n              \"spaceReclamation\": false,\r\n              \"skipConsistencyCheck\": false,\r\n              \"createNewIndex\": false,\r\n              \"verifySynthFull\": false\r\n            },\r\n            \"dataPathOpt\": {\r\n              \"mediaAgent\": {\r\n                \"mediaAgentId\": 0\r\n              },\r\n              \"library\": {\r\n                \"libraryId\": 0\r\n              },\r\n              \"drivePool\": {\r\n                \"drivePoolId\": 0\r\n              },\r\n              \"spareGroup\": {\r\n                \"spareMediaGroupId\": 0\r\n              },\r\n              \"drive\": {\r\n                \"driveId\": 0\r\n              }\r\n            },\r\n            \"mediaOpt\": {\r\n              \"markMediaFullOnSuccess\": false,\r\n              \"numberofDays\": 30,\r\n              \"startNewMedia\": true,\r\n              \"retentionJobType\": 2,\r\n              \"allowOtherSchedulesToUseMediaSet\": true,\r\n              \"reserveResourcesBeforeScan\": false\r\n            }\r\n          },\r\n          \"commonOpts\": {\r\n            \"jobDescription\": \"\",\r\n            \"jobRetryOpts\": {\r\n              \"killRunningJobWhenTotalRunningTimeExpires\": false,\r\n              \"numberOfRetries\": 0,\r\n              \"enableNumberOfRetries\": false,\r\n              \"runningTime\": {\r\n                \"enableTotalRunningTime\": false,\r\n                \"totalRunningTime\": 3600\r\n              }\r\n            },\r\n            \"startUpOpts\": {\r\n              \"startInSuspendedState\": false,\r\n              \"useDefaultPriority\": true,\r\n              \"priority\": 166\r\n            }\r\n          }\r\n        }\r\n      }\r\n    ]\r\n  }\r\n}"
headers = {
  'Accept': 'application/json',
  'Content-Type': 'application/json',
  'Authtoken': ""+token+""
}

#print(payload)
response = requests.request("POST", url, headers=headers, data=payload, verify=False)
check =response.status_code
#print(response)
response = json.loads(response.text)

jobid=response["jobIds"][0]

print("Job Initiated for client "+clientname+"and Job ID is " +jobid+"")
time.sleep(2)

while True:

    url = "http://ec2amaz-nib1gef/webconsole/api/Job/"+jobid+""

    payload={}
    headers = {
      'Accept': 'application/json',
      'Authtoken': ""+token+""
    }

    response = requests.request("GET", url, headers=headers, data=payload, verify=False)

    response = json.loads(response.text)
    time.sleep(2)
#    job_client = response["jobs"][0]["jobSummary"]["destClientName"]
    job_status = response["jobs"][0]["jobSummary"]["status"]
    job_percent = response["jobs"][0]["jobSummary"]["percentComplete"]
    job_type = response["jobs"][0]["jobSummary"]["jobType"]
    job_level = response["jobs"][0]["jobSummary"]["backupLevelName"]
#    phase = response["jobs"][0]["jobSummary"]["currentPhaseName"]
    
    
    if job_percent == 100:
        print("")
        print("Final job status")
        print("---------------------")
        print("Client Name : "+clientname+"")
        print("Job Type : "+job_type+"")
        print("Job Level : "+job_level+"")
        print("Percentage of completion : "+str(job_percent)+"")
        print("Backup job status : "+job_status+"")
        
        
        break
    else:
        print("Present job progress in %::"+str(job_percent)+"")


    
